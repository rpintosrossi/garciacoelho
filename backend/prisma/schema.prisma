// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(OPERADOR)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceDrafts ServiceDraft[]
}

model Administrator {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  phone       String
  buildings   Building[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Building {
  id              String    @id @default(uuid())
  name            String
  address         String
  cuit            String    @unique
  contact         String
  taxCondition    TaxCondition @default(CONSUMIDOR_FINAL)
  administratorId String
  administrator   Administrator @relation(fields: [administratorId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  services        Service[]
  serviceDrafts   ServiceDraft[]
  account         Account?
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String
  status      ServiceStatus @default(PENDIENTE)
  building    Building @relation(fields: [buildingId], references: [id])
  buildingId  String
  technician  Technician? @relation(fields: [technicianId], references: [id])
  technicianId String?
  visitDate   DateTime?
  receiptImages String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice?
  remitos     Remito[]
}

model Invoice {
  id          String    @id @default(uuid())
  serviceId   String    @unique
  service     Service   @relation(fields: [serviceId], references: [id])
  amount      Float
  status      InvoiceStatus @default(PENDIENTE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  paymentDocuments PaymentDocument[]
}

model Account {
  id          String    @id @default(uuid())
  buildingId  String    @unique
  building    Building  @relation(fields: [buildingId], references: [id])
  balance     Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ServiceDraft {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  status      String
  buildingId  String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  building    Building @relation(fields: [buildingId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("service_drafts")
}

model Technician {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  status    String    @default("ACTIVE")
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("technicians")
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float
  originalAmount Float? // monto original antes del descuento
  discount  Float    @default(0) // monto del descuento aplicado
  discountReason String? // razón del descuento (ej: "coima", "descuento comercial", etc.)
  date      DateTime
  method    String
  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comprobante String @unique // número de comprobante legible
  documents PaymentDocument[]
}

model PaymentDocument {
  id        String   @id @default(uuid())
  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
  remito    Remito?  @relation(fields: [remitoId], references: [id])
  remitoId  String?
  amount    Float // monto aplicado a este documento
}

model PaymentMethod {
  id        String   @id @default(uuid())
  name      String   @unique
  payments  Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Remito {
  id        String   @id @default(uuid())
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  number    String   @unique
  amount    Float
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentDocuments PaymentDocument[]
}

enum Role {
  ADMIN
  OPERADOR
  TECNICO
}

enum ServiceStatus {
  PENDIENTE
  ASIGNADO
  CON_REMITO
  FACTURADO
}

enum InvoiceStatus {
  PENDIENTE
  EMITIDA
  PAGADA
}

enum TaxCondition {
  RESPONSABLE_INSCRIPTO
  MONOTRIBUTO
  EXENTO
  CONSUMIDOR_FINAL
}
